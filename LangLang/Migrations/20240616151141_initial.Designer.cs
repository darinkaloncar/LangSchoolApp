// <auto-generated />
using System;
using LangLang.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LangLang.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240616151141_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LangLang.Domain.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("CreatedByDirector")
                        .HasColumnType("boolean");

                    b.Property<int[]>("Days")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<bool>("GratitudeEmailSent")
                        .HasColumnType("boolean");

                    b.Property<int>("LanguageLevelId")
                        .HasColumnType("integer")
                        .HasColumnName("LanguageLevelId");

                    b.Property<int>("MaxStudents")
                        .HasColumnType("integer");

                    b.Property<bool>("Modifiable")
                        .HasColumnType("boolean");

                    b.Property<int>("NumberOfStudents")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfWeeks")
                        .HasColumnType("integer");

                    b.Property<bool>("Online")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TutorId")
                        .HasColumnType("integer")
                        .HasColumnName("TutorId");

                    b.HasKey("Id");

                    b.HasIndex("LanguageLevelId");

                    b.HasIndex("TutorId");

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("LangLang.Domain.Models.CourseTimeSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("integer")
                        .HasColumnName("CourseId");

                    b.Property<int>("TimeSlotId")
                        .HasColumnType("integer")
                        .HasColumnName("TimeSlotId");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("TimeSlotId");

                    b.ToTable("CourseTimeSlot", (string)null);
                });

            modelBuilder.Entity("LangLang.Domain.Models.ExamSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Applicants")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("ExamineesNotified")
                        .HasColumnType("boolean");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<int>("MaxStudents")
                        .HasColumnType("integer");

                    b.Property<bool>("Modifiable")
                        .HasColumnType("boolean");

                    b.Property<bool>("ResultsGenerated")
                        .HasColumnType("boolean");

                    b.Property<int>("TimeSlotId")
                        .HasColumnType("integer");

                    b.Property<int>("TutorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("TimeSlotId");

                    b.HasIndex("TutorId");

                    b.ToTable("ExamSlot", (string)null);
                });

            modelBuilder.Entity("LangLang.Domain.Models.LanguageLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("LanguageLevel", (string)null);
                });

            modelBuilder.Entity("LangLang.Domain.Models.TimeSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Duration")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("TimeSlot", (string)null);
                });

            modelBuilder.Entity("LangLang.Domain.Models.Tutor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EmploymentDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Tutor", (string)null);
                });

            modelBuilder.Entity("LangLang.Domain.Models.TutorSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("LanguageLevelId")
                        .HasColumnType("integer");

                    b.Property<int>("TutorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LanguageLevelId");

                    b.HasIndex("TutorId");

                    b.ToTable("TutorSkill", (string)null);
                });

            modelBuilder.Entity("LangLang.Domain.Models.Course", b =>
                {
                    b.HasOne("LangLang.Domain.Models.LanguageLevel", null)
                        .WithMany()
                        .HasForeignKey("LanguageLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LangLang.Domain.Models.Tutor", null)
                        .WithMany()
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LangLang.Domain.Models.CourseTimeSlot", b =>
                {
                    b.HasOne("LangLang.Domain.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LangLang.Domain.Models.TimeSlot", null)
                        .WithMany()
                        .HasForeignKey("TimeSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LangLang.Domain.Models.ExamSlot", b =>
                {
                    b.HasOne("LangLang.Domain.Models.LanguageLevel", null)
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LangLang.Domain.Models.TimeSlot", null)
                        .WithMany()
                        .HasForeignKey("TimeSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LangLang.Domain.Models.Tutor", null)
                        .WithMany()
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LangLang.Domain.Models.Tutor", b =>
                {
                    b.OwnsOne("LangLang.Domain.Models.Profile", "Profile", b1 =>
                        {
                            b1.Property<int>("TutorId")
                                .HasColumnType("integer");

                            b1.Property<DateTime>("BirthDate")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("BirthDate");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Email");

                            b1.Property<int>("Gender")
                                .HasColumnType("integer")
                                .HasColumnName("Gender");

                            b1.Property<int>("Id")
                                .HasColumnType("integer");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("boolean")
                                .HasColumnName("IsActive");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("LastName");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Name");

                            b1.Property<string>("Password")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Password");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PhoneNumber");

                            b1.Property<int>("Role")
                                .HasColumnType("integer")
                                .HasColumnName("Role");

                            b1.HasKey("TutorId");

                            b1.ToTable("Tutor");

                            b1.WithOwner()
                                .HasForeignKey("TutorId");
                        });

                    b.Navigation("Profile")
                        .IsRequired();
                });

            modelBuilder.Entity("LangLang.Domain.Models.TutorSkill", b =>
                {
                    b.HasOne("LangLang.Domain.Models.LanguageLevel", null)
                        .WithMany()
                        .HasForeignKey("LanguageLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LangLang.Domain.Models.Tutor", null)
                        .WithMany()
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
